@page "/Identity/Manage/Roles"
@using Microsoft.AspNetCore.Identity;
@using System.ComponentModel.DataAnnotations;
@using System.Security.Claims;
@using BlazorIdentity.Data
@using BlazorIdentity.Areas.Identity.Data
@inject BlazorIdentityContext _blazorIdentity

@attribute [Authorize]

<p>@message</p>

@*<EditForm Model="@roleModel" OnValidSubmit="HandlerValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputText id="name" @bind-Value="roleModel.Name" />
    <button type="submit">Submit</button>
</EditForm>*@

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    AuthenticationState authState { get; set; }
    ClaimsPrincipal user { get; set; }

    private string message { get; set; }

    //private AspNetRoles roleModel = new AspNetRoles();

    //protected override async Task OnInitializedAsync()
    //{
    //    authState = await authenticationStateTask;
    //    user = authState.User;

    //    if (user.Identity.IsAuthenticated)
    //    {
    //        message = $"{user.Identity.Name} is authenticated.";
    //    }
    //    else
    //    {
    //        message = "The user is NOT authenticated.";
    //    }

    //    await base.OnInitializedAsync();
    //    return;
    //}

    //private async void HandlerValidSubmit()
    //{
    //    try
    //    {
    //        roleModel.Id = "0";
    //        roleModel.NormalizedName = roleModel.Name.ToUpper();
    //        roleModel.ConcurrencyStamp = DateTime.UtcNow.ToShortTimeString();
    //        await _blazorIdentity.AddAsync<AspNetRoles>(roleModel);
    //        await _blazorIdentity.SaveChangesAsync();
    //    }
    //    catch(Exception e)
    //    {
    //        var message = e.Message;
    //    }
    //}
}
